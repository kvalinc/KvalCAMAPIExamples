/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all feature group headers from the feature group library
        /// </summary>
        /// <remarks>
        /// This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FeatureGroupHeadersResponse</returns>
        FeatureGroupHeadersResponse RestApiV1FeaturegroupsHeadersGet ();

        /// <summary>
        /// Returns all feature group headers from the feature group library
        /// </summary>
        /// <remarks>
        /// This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FeatureGroupHeadersResponse</returns>
        ApiResponse<FeatureGroupHeadersResponse> RestApiV1FeaturegroupsHeadersGetWithHttpInfo ();
        /// <summary>
        /// Creates a feature group with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CreateFeatureGroupResponse</returns>
        CreateFeatureGroupResponse RestApiV1FeaturegroupsPost (CreateFeatureGroupParameters parameters = null);

        /// <summary>
        /// Creates a feature group with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CreateFeatureGroupResponse</returns>
        ApiResponse<CreateFeatureGroupResponse> RestApiV1FeaturegroupsPostWithHttpInfo (CreateFeatureGroupParameters parameters = null);
        /// <summary>
        /// Inserts or updates a feature group in the feature group library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>UpsertFeatureGroupResponse</returns>
        UpsertFeatureGroupResponse RestApiV1FeaturegroupsPut (UpsertFeatureGroupParameters parameters = null);

        /// <summary>
        /// Inserts or updates a feature group in the feature group library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of UpsertFeatureGroupResponse</returns>
        ApiResponse<UpsertFeatureGroupResponse> RestApiV1FeaturegroupsPutWithHttpInfo (UpsertFeatureGroupParameters parameters = null);
        /// <summary>
        /// Performs search query on the feature group library
        /// </summary>
        /// <remarks>
        /// Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SearchFeatureGroupsResponse</returns>
        SearchFeatureGroupsResponse RestApiV1FeaturegroupsSearchPost (SearchFeatureGroupsParameters parameters = null);

        /// <summary>
        /// Performs search query on the feature group library
        /// </summary>
        /// <remarks>
        /// Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SearchFeatureGroupsResponse</returns>
        ApiResponse<SearchFeatureGroupsResponse> RestApiV1FeaturegroupsSearchPostWithHttpInfo (SearchFeatureGroupsParameters parameters = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns all feature group headers from the feature group library
        /// </summary>
        /// <remarks>
        /// This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FeatureGroupHeadersResponse</returns>
        System.Threading.Tasks.Task<FeatureGroupHeadersResponse> RestApiV1FeaturegroupsHeadersGetAsync ();

        /// <summary>
        /// Returns all feature group headers from the feature group library
        /// </summary>
        /// <remarks>
        /// This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FeatureGroupHeadersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureGroupHeadersResponse>> RestApiV1FeaturegroupsHeadersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a feature group with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CreateFeatureGroupResponse</returns>
        System.Threading.Tasks.Task<CreateFeatureGroupResponse> RestApiV1FeaturegroupsPostAsync (CreateFeatureGroupParameters parameters = null);

        /// <summary>
        /// Creates a feature group with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateFeatureGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFeatureGroupResponse>> RestApiV1FeaturegroupsPostAsyncWithHttpInfo (CreateFeatureGroupParameters parameters = null);
        /// <summary>
        /// Inserts or updates a feature group in the feature group library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of UpsertFeatureGroupResponse</returns>
        System.Threading.Tasks.Task<UpsertFeatureGroupResponse> RestApiV1FeaturegroupsPutAsync (UpsertFeatureGroupParameters parameters = null);

        /// <summary>
        /// Inserts or updates a feature group in the feature group library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (UpsertFeatureGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertFeatureGroupResponse>> RestApiV1FeaturegroupsPutAsyncWithHttpInfo (UpsertFeatureGroupParameters parameters = null);
        /// <summary>
        /// Performs search query on the feature group library
        /// </summary>
        /// <remarks>
        /// Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SearchFeatureGroupsResponse</returns>
        System.Threading.Tasks.Task<SearchFeatureGroupsResponse> RestApiV1FeaturegroupsSearchPostAsync (SearchFeatureGroupsParameters parameters = null);

        /// <summary>
        /// Performs search query on the feature group library
        /// </summary>
        /// <remarks>
        /// Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchFeatureGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchFeatureGroupsResponse>> RestApiV1FeaturegroupsSearchPostAsyncWithHttpInfo (SearchFeatureGroupsParameters parameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeatureGroupsApi : IFeatureGroupsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureGroupsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeatureGroupsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns all feature group headers from the feature group library This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FeatureGroupHeadersResponse</returns>
        public FeatureGroupHeadersResponse RestApiV1FeaturegroupsHeadersGet ()
        {
             ApiResponse<FeatureGroupHeadersResponse> localVarResponse = RestApiV1FeaturegroupsHeadersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all feature group headers from the feature group library This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FeatureGroupHeadersResponse</returns>
        public ApiResponse< FeatureGroupHeadersResponse > RestApiV1FeaturegroupsHeadersGetWithHttpInfo ()
        {

            var localVarPath = "/featuregroups/headers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsHeadersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureGroupHeadersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureGroupHeadersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureGroupHeadersResponse)));
        }

        /// <summary>
        /// Returns all feature group headers from the feature group library This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FeatureGroupHeadersResponse</returns>
        public async System.Threading.Tasks.Task<FeatureGroupHeadersResponse> RestApiV1FeaturegroupsHeadersGetAsync ()
        {
             ApiResponse<FeatureGroupHeadersResponse> localVarResponse = await RestApiV1FeaturegroupsHeadersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all feature group headers from the feature group library This method will return all of the feature group headers. Each header includes a small bit of meta data for a feature group entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FeatureGroupHeadersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureGroupHeadersResponse>> RestApiV1FeaturegroupsHeadersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/featuregroups/headers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsHeadersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureGroupHeadersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureGroupHeadersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureGroupHeadersResponse)));
        }

        /// <summary>
        /// Creates a feature group with a generated id Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CreateFeatureGroupResponse</returns>
        public CreateFeatureGroupResponse RestApiV1FeaturegroupsPost (CreateFeatureGroupParameters parameters = null)
        {
             ApiResponse<CreateFeatureGroupResponse> localVarResponse = RestApiV1FeaturegroupsPostWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a feature group with a generated id Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CreateFeatureGroupResponse</returns>
        public ApiResponse< CreateFeatureGroupResponse > RestApiV1FeaturegroupsPostWithHttpInfo (CreateFeatureGroupParameters parameters = null)
        {

            var localVarPath = "/featuregroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFeatureGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFeatureGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFeatureGroupResponse)));
        }

        /// <summary>
        /// Creates a feature group with a generated id Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CreateFeatureGroupResponse</returns>
        public async System.Threading.Tasks.Task<CreateFeatureGroupResponse> RestApiV1FeaturegroupsPostAsync (CreateFeatureGroupParameters parameters = null)
        {
             ApiResponse<CreateFeatureGroupResponse> localVarResponse = await RestApiV1FeaturegroupsPostAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a feature group with a generated id Adds a new feature group to the feature group library using the feature group data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateFeatureGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateFeatureGroupResponse>> RestApiV1FeaturegroupsPostAsyncWithHttpInfo (CreateFeatureGroupParameters parameters = null)
        {

            var localVarPath = "/featuregroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFeatureGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFeatureGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFeatureGroupResponse)));
        }

        /// <summary>
        /// Inserts or updates a feature group in the feature group library The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>UpsertFeatureGroupResponse</returns>
        public UpsertFeatureGroupResponse RestApiV1FeaturegroupsPut (UpsertFeatureGroupParameters parameters = null)
        {
             ApiResponse<UpsertFeatureGroupResponse> localVarResponse = RestApiV1FeaturegroupsPutWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserts or updates a feature group in the feature group library The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of UpsertFeatureGroupResponse</returns>
        public ApiResponse< UpsertFeatureGroupResponse > RestApiV1FeaturegroupsPutWithHttpInfo (UpsertFeatureGroupParameters parameters = null)
        {

            var localVarPath = "/featuregroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertFeatureGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpsertFeatureGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertFeatureGroupResponse)));
        }

        /// <summary>
        /// Inserts or updates a feature group in the feature group library The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of UpsertFeatureGroupResponse</returns>
        public async System.Threading.Tasks.Task<UpsertFeatureGroupResponse> RestApiV1FeaturegroupsPutAsync (UpsertFeatureGroupParameters parameters = null)
        {
             ApiResponse<UpsertFeatureGroupResponse> localVarResponse = await RestApiV1FeaturegroupsPutAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserts or updates a feature group in the feature group library The id given is used to determine whether to perform an insert or an update, if the id already exists then an update is performed, otherwise the feature group is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (UpsertFeatureGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertFeatureGroupResponse>> RestApiV1FeaturegroupsPutAsyncWithHttpInfo (UpsertFeatureGroupParameters parameters = null)
        {

            var localVarPath = "/featuregroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertFeatureGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpsertFeatureGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertFeatureGroupResponse)));
        }

        /// <summary>
        /// Performs search query on the feature group library Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SearchFeatureGroupsResponse</returns>
        public SearchFeatureGroupsResponse RestApiV1FeaturegroupsSearchPost (SearchFeatureGroupsParameters parameters = null)
        {
             ApiResponse<SearchFeatureGroupsResponse> localVarResponse = RestApiV1FeaturegroupsSearchPostWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs search query on the feature group library Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SearchFeatureGroupsResponse</returns>
        public ApiResponse< SearchFeatureGroupsResponse > RestApiV1FeaturegroupsSearchPostWithHttpInfo (SearchFeatureGroupsParameters parameters = null)
        {

            var localVarPath = "/featuregroups/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchFeatureGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchFeatureGroupsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchFeatureGroupsResponse)));
        }

        /// <summary>
        /// Performs search query on the feature group library Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SearchFeatureGroupsResponse</returns>
        public async System.Threading.Tasks.Task<SearchFeatureGroupsResponse> RestApiV1FeaturegroupsSearchPostAsync (SearchFeatureGroupsParameters parameters = null)
        {
             ApiResponse<SearchFeatureGroupsResponse> localVarResponse = await RestApiV1FeaturegroupsSearchPostAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs search query on the feature group library Searches the feature group library using a POST request using request body for parameters. If no parameters are given then all feature groups are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchFeatureGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchFeatureGroupsResponse>> RestApiV1FeaturegroupsSearchPostAsyncWithHttpInfo (SearchFeatureGroupsParameters parameters = null)
        {

            var localVarPath = "/featuregroups/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1FeaturegroupsSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchFeatureGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchFeatureGroupsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchFeatureGroupsResponse)));
        }

    }
}
