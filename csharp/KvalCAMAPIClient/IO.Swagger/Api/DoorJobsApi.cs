/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDoorJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all door job headers from the door job library
        /// </summary>
        /// <remarks>
        /// This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DoorJobHeadersResponse</returns>
        DoorJobHeadersResponse RestApiV1DoorjobsHeadersGet ();

        /// <summary>
        /// Returns all door job headers from the door job library
        /// </summary>
        /// <remarks>
        /// This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DoorJobHeadersResponse</returns>
        ApiResponse<DoorJobHeadersResponse> RestApiV1DoorjobsHeadersGetWithHttpInfo ();
        /// <summary>
        /// Creates a door job with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CreateDoorJobResponse</returns>
        CreateDoorJobResponse RestApiV1DoorjobsPost (CreateDoorJobParameters parameters = null);

        /// <summary>
        /// Creates a door job with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CreateDoorJobResponse</returns>
        ApiResponse<CreateDoorJobResponse> RestApiV1DoorjobsPostWithHttpInfo (CreateDoorJobParameters parameters = null);
        /// <summary>
        /// Inserts or updates a door job in the door job library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>UpsertDoorJobResponse</returns>
        UpsertDoorJobResponse RestApiV1DoorjobsPut (UpsertDoorJobParameters parameters = null);

        /// <summary>
        /// Inserts or updates a door job in the door job library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of UpsertDoorJobResponse</returns>
        ApiResponse<UpsertDoorJobResponse> RestApiV1DoorjobsPutWithHttpInfo (UpsertDoorJobParameters parameters = null);
        /// <summary>
        /// Performs search query on the door job library
        /// </summary>
        /// <remarks>
        /// Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SearchDoorJobsResponse</returns>
        SearchDoorJobsResponse RestApiV1DoorjobsSearchPost (SearchDoorJobsParameters parameters = null);

        /// <summary>
        /// Performs search query on the door job library
        /// </summary>
        /// <remarks>
        /// Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SearchDoorJobsResponse</returns>
        ApiResponse<SearchDoorJobsResponse> RestApiV1DoorjobsSearchPostWithHttpInfo (SearchDoorJobsParameters parameters = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns all door job headers from the door job library
        /// </summary>
        /// <remarks>
        /// This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DoorJobHeadersResponse</returns>
        System.Threading.Tasks.Task<DoorJobHeadersResponse> RestApiV1DoorjobsHeadersGetAsync ();

        /// <summary>
        /// Returns all door job headers from the door job library
        /// </summary>
        /// <remarks>
        /// This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DoorJobHeadersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoorJobHeadersResponse>> RestApiV1DoorjobsHeadersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a door job with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CreateDoorJobResponse</returns>
        System.Threading.Tasks.Task<CreateDoorJobResponse> RestApiV1DoorjobsPostAsync (CreateDoorJobParameters parameters = null);

        /// <summary>
        /// Creates a door job with a generated id
        /// </summary>
        /// <remarks>
        /// Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateDoorJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDoorJobResponse>> RestApiV1DoorjobsPostAsyncWithHttpInfo (CreateDoorJobParameters parameters = null);
        /// <summary>
        /// Inserts or updates a door job in the door job library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of UpsertDoorJobResponse</returns>
        System.Threading.Tasks.Task<UpsertDoorJobResponse> RestApiV1DoorjobsPutAsync (UpsertDoorJobParameters parameters = null);

        /// <summary>
        /// Inserts or updates a door job in the door job library
        /// </summary>
        /// <remarks>
        /// The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (UpsertDoorJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertDoorJobResponse>> RestApiV1DoorjobsPutAsyncWithHttpInfo (UpsertDoorJobParameters parameters = null);
        /// <summary>
        /// Performs search query on the door job library
        /// </summary>
        /// <remarks>
        /// Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SearchDoorJobsResponse</returns>
        System.Threading.Tasks.Task<SearchDoorJobsResponse> RestApiV1DoorjobsSearchPostAsync (SearchDoorJobsParameters parameters = null);

        /// <summary>
        /// Performs search query on the door job library
        /// </summary>
        /// <remarks>
        /// Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchDoorJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDoorJobsResponse>> RestApiV1DoorjobsSearchPostAsyncWithHttpInfo (SearchDoorJobsParameters parameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DoorJobsApi : IDoorJobsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DoorJobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DoorJobsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DoorJobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DoorJobsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns all door job headers from the door job library This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DoorJobHeadersResponse</returns>
        public DoorJobHeadersResponse RestApiV1DoorjobsHeadersGet ()
        {
             ApiResponse<DoorJobHeadersResponse> localVarResponse = RestApiV1DoorjobsHeadersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all door job headers from the door job library This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DoorJobHeadersResponse</returns>
        public ApiResponse< DoorJobHeadersResponse > RestApiV1DoorjobsHeadersGetWithHttpInfo ()
        {

            var localVarPath = "/doorjobs/headers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsHeadersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoorJobHeadersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoorJobHeadersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoorJobHeadersResponse)));
        }

        /// <summary>
        /// Returns all door job headers from the door job library This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DoorJobHeadersResponse</returns>
        public async System.Threading.Tasks.Task<DoorJobHeadersResponse> RestApiV1DoorjobsHeadersGetAsync ()
        {
             ApiResponse<DoorJobHeadersResponse> localVarResponse = await RestApiV1DoorjobsHeadersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all door job headers from the door job library This method will return all of the door job headers. Each header includes a small bit of meta data for a door job entry in the library
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DoorJobHeadersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoorJobHeadersResponse>> RestApiV1DoorjobsHeadersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/doorjobs/headers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsHeadersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoorJobHeadersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoorJobHeadersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoorJobHeadersResponse)));
        }

        /// <summary>
        /// Creates a door job with a generated id Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CreateDoorJobResponse</returns>
        public CreateDoorJobResponse RestApiV1DoorjobsPost (CreateDoorJobParameters parameters = null)
        {
             ApiResponse<CreateDoorJobResponse> localVarResponse = RestApiV1DoorjobsPostWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a door job with a generated id Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CreateDoorJobResponse</returns>
        public ApiResponse< CreateDoorJobResponse > RestApiV1DoorjobsPostWithHttpInfo (CreateDoorJobParameters parameters = null)
        {

            var localVarPath = "/doorjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDoorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDoorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDoorJobResponse)));
        }

        /// <summary>
        /// Creates a door job with a generated id Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CreateDoorJobResponse</returns>
        public async System.Threading.Tasks.Task<CreateDoorJobResponse> RestApiV1DoorjobsPostAsync (CreateDoorJobParameters parameters = null)
        {
             ApiResponse<CreateDoorJobResponse> localVarResponse = await RestApiV1DoorjobsPostAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a door job with a generated id Adds a new door job to the door job library using the door job data given, id is ignored with unique id created by the server and returned
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateDoorJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateDoorJobResponse>> RestApiV1DoorjobsPostAsyncWithHttpInfo (CreateDoorJobParameters parameters = null)
        {

            var localVarPath = "/doorjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDoorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDoorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDoorJobResponse)));
        }

        /// <summary>
        /// Inserts or updates a door job in the door job library The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>UpsertDoorJobResponse</returns>
        public UpsertDoorJobResponse RestApiV1DoorjobsPut (UpsertDoorJobParameters parameters = null)
        {
             ApiResponse<UpsertDoorJobResponse> localVarResponse = RestApiV1DoorjobsPutWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserts or updates a door job in the door job library The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of UpsertDoorJobResponse</returns>
        public ApiResponse< UpsertDoorJobResponse > RestApiV1DoorjobsPutWithHttpInfo (UpsertDoorJobParameters parameters = null)
        {

            var localVarPath = "/doorjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertDoorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpsertDoorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertDoorJobResponse)));
        }

        /// <summary>
        /// Inserts or updates a door job in the door job library The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of UpsertDoorJobResponse</returns>
        public async System.Threading.Tasks.Task<UpsertDoorJobResponse> RestApiV1DoorjobsPutAsync (UpsertDoorJobParameters parameters = null)
        {
             ApiResponse<UpsertDoorJobResponse> localVarResponse = await RestApiV1DoorjobsPutAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserts or updates a door job in the door job library The id given is used to determine whether to perform an insert or an update, if the id already exists in the door job library then an update is performed, otherwise the door job is inserted
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (UpsertDoorJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertDoorJobResponse>> RestApiV1DoorjobsPutAsyncWithHttpInfo (UpsertDoorJobParameters parameters = null)
        {

            var localVarPath = "/doorjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertDoorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpsertDoorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertDoorJobResponse)));
        }

        /// <summary>
        /// Performs search query on the door job library Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SearchDoorJobsResponse</returns>
        public SearchDoorJobsResponse RestApiV1DoorjobsSearchPost (SearchDoorJobsParameters parameters = null)
        {
             ApiResponse<SearchDoorJobsResponse> localVarResponse = RestApiV1DoorjobsSearchPostWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs search query on the door job library Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SearchDoorJobsResponse</returns>
        public ApiResponse< SearchDoorJobsResponse > RestApiV1DoorjobsSearchPostWithHttpInfo (SearchDoorJobsParameters parameters = null)
        {

            var localVarPath = "/doorjobs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDoorJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDoorJobsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDoorJobsResponse)));
        }

        /// <summary>
        /// Performs search query on the door job library Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SearchDoorJobsResponse</returns>
        public async System.Threading.Tasks.Task<SearchDoorJobsResponse> RestApiV1DoorjobsSearchPostAsync (SearchDoorJobsParameters parameters = null)
        {
             ApiResponse<SearchDoorJobsResponse> localVarResponse = await RestApiV1DoorjobsSearchPostAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs search query on the door job library Searches the door job library using a POST request using request body for parameters. If no parameters are given then all door jobs are returned. Sql wildcards are supported for some fields, see parameters for details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchDoorJobsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchDoorJobsResponse>> RestApiV1DoorjobsSearchPostAsyncWithHttpInfo (SearchDoorJobsParameters parameters = null)
        {

            var localVarPath = "/doorjobs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestApiV1DoorjobsSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchDoorJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchDoorJobsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchDoorJobsResponse)));
        }

    }
}
