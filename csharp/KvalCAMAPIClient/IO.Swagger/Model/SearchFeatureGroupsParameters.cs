/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Parameters used to search feature groups, SQL wild cards are supported
    /// </summary>
    [DataContract]
    public partial class SearchFeatureGroupsParameters :  IEquatable<SearchFeatureGroupsParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchFeatureGroupsParameters" /> class.
        /// </summary>
        /// <param name="Id">Exact door feature group id to search for.</param>
        /// <param name="Name">Search feature group names with sql wildcard support, percent (&#39;%&#39;) matches one or more of any character, underscore (&#39;\\_&#39;) matches any single character, if searching for wildcard characters (&#39;%&#39; or &#39;\\_&#39;) use backslash to escape.</param>
        /// <param name="Description">Search feature group descriptions with sql wildcard support, percent (&#39;%&#39;) matches one or more of any character, underscore (&#39;\\_&#39;) matches any single character, if searching for wildcard characters (&#39;%&#39; or &#39;\\_&#39;) use backslash to escape.</param>
        /// <param name="CreatedBefore">Only return feature groups whose created timestamp is before this timestamp.</param>
        /// <param name="CreatedAfter">Only return feature groups whose created timestamp is after this timestamp.</param>
        /// <param name="ModifiedBefore">Only return feature groups whose modified timestamp is before this timestamp.</param>
        /// <param name="ModifiedAfter">Only return feature groups whose modified timestamp is after this timestamp.</param>
        public SearchFeatureGroupsParameters(Guid? Id = default(Guid?), string Name = default(string), string Description = default(string), DateTime? CreatedBefore = default(DateTime?), DateTime? CreatedAfter = default(DateTime?), DateTime? ModifiedBefore = default(DateTime?), DateTime? ModifiedAfter = default(DateTime?))
        {
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.CreatedBefore = CreatedBefore;
            this.CreatedAfter = CreatedAfter;
            this.ModifiedBefore = ModifiedBefore;
            this.ModifiedAfter = ModifiedAfter;
        }
        
        /// <summary>
        /// Exact door feature group id to search for
        /// </summary>
        /// <value>Exact door feature group id to search for</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Search feature group names with sql wildcard support, percent (&#39;%&#39;) matches one or more of any character, underscore (&#39;\\_&#39;) matches any single character, if searching for wildcard characters (&#39;%&#39; or &#39;\\_&#39;) use backslash to escape
        /// </summary>
        /// <value>Search feature group names with sql wildcard support, percent (&#39;%&#39;) matches one or more of any character, underscore (&#39;\\_&#39;) matches any single character, if searching for wildcard characters (&#39;%&#39; or &#39;\\_&#39;) use backslash to escape</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Search feature group descriptions with sql wildcard support, percent (&#39;%&#39;) matches one or more of any character, underscore (&#39;\\_&#39;) matches any single character, if searching for wildcard characters (&#39;%&#39; or &#39;\\_&#39;) use backslash to escape
        /// </summary>
        /// <value>Search feature group descriptions with sql wildcard support, percent (&#39;%&#39;) matches one or more of any character, underscore (&#39;\\_&#39;) matches any single character, if searching for wildcard characters (&#39;%&#39; or &#39;\\_&#39;) use backslash to escape</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Only return feature groups whose created timestamp is before this timestamp
        /// </summary>
        /// <value>Only return feature groups whose created timestamp is before this timestamp</value>
        [DataMember(Name="CreatedBefore", EmitDefaultValue=false)]
        public DateTime? CreatedBefore { get; set; }

        /// <summary>
        /// Only return feature groups whose created timestamp is after this timestamp
        /// </summary>
        /// <value>Only return feature groups whose created timestamp is after this timestamp</value>
        [DataMember(Name="CreatedAfter", EmitDefaultValue=false)]
        public DateTime? CreatedAfter { get; set; }

        /// <summary>
        /// Only return feature groups whose modified timestamp is before this timestamp
        /// </summary>
        /// <value>Only return feature groups whose modified timestamp is before this timestamp</value>
        [DataMember(Name="ModifiedBefore", EmitDefaultValue=false)]
        public DateTime? ModifiedBefore { get; set; }

        /// <summary>
        /// Only return feature groups whose modified timestamp is after this timestamp
        /// </summary>
        /// <value>Only return feature groups whose modified timestamp is after this timestamp</value>
        [DataMember(Name="ModifiedAfter", EmitDefaultValue=false)]
        public DateTime? ModifiedAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchFeatureGroupsParameters {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedBefore: ").Append(CreatedBefore).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  ModifiedBefore: ").Append(ModifiedBefore).Append("\n");
            sb.Append("  ModifiedAfter: ").Append(ModifiedAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchFeatureGroupsParameters);
        }

        /// <summary>
        /// Returns true if SearchFeatureGroupsParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchFeatureGroupsParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchFeatureGroupsParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreatedBefore == input.CreatedBefore ||
                    (this.CreatedBefore != null &&
                    this.CreatedBefore.Equals(input.CreatedBefore))
                ) && 
                (
                    this.CreatedAfter == input.CreatedAfter ||
                    (this.CreatedAfter != null &&
                    this.CreatedAfter.Equals(input.CreatedAfter))
                ) && 
                (
                    this.ModifiedBefore == input.ModifiedBefore ||
                    (this.ModifiedBefore != null &&
                    this.ModifiedBefore.Equals(input.ModifiedBefore))
                ) && 
                (
                    this.ModifiedAfter == input.ModifiedAfter ||
                    (this.ModifiedAfter != null &&
                    this.ModifiedAfter.Equals(input.ModifiedAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreatedBefore != null)
                    hashCode = hashCode * 59 + this.CreatedBefore.GetHashCode();
                if (this.CreatedAfter != null)
                    hashCode = hashCode * 59 + this.CreatedAfter.GetHashCode();
                if (this.ModifiedBefore != null)
                    hashCode = hashCode * 59 + this.ModifiedBefore.GetHashCode();
                if (this.ModifiedAfter != null)
                    hashCode = hashCode * 59 + this.ModifiedAfter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
