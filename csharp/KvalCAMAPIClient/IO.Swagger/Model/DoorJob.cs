/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Door job representing a door data object and list of feature groups
    /// </summary>
    [DataContract]
    public partial class DoorJob :  IEquatable<DoorJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DoorJob" /> class.
        /// </summary>
        /// <param name="Name">Name of the door job.</param>
        /// <param name="Description">Description of the door job.</param>
        /// <param name="Id">Unique library id of the door job.</param>
        /// <param name="DoorData">Door data for the job.</param>
        /// <param name="FeatureGroups">Feature groups that represent all the cuts for the job.</param>
        public DoorJob(string Name = default(string), string Description = default(string), Guid? Id = default(Guid?), DoorData DoorData = default(DoorData), List<FeatureGroup> FeatureGroups = default(List<FeatureGroup>))
        {
            this.Name = Name;
            this.Description = Description;
            this.Id = Id;
            this.DoorData = DoorData;
            this.FeatureGroups = FeatureGroups;
        }
        
        /// <summary>
        /// Name of the door job
        /// </summary>
        /// <value>Name of the door job</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the door job
        /// </summary>
        /// <value>Description of the door job</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Unique library id of the door job
        /// </summary>
        /// <value>Unique library id of the door job</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Door data for the job
        /// </summary>
        /// <value>Door data for the job</value>
        [DataMember(Name="DoorData", EmitDefaultValue=false)]
        public DoorData DoorData { get; set; }

        /// <summary>
        /// Feature groups that represent all the cuts for the job
        /// </summary>
        /// <value>Feature groups that represent all the cuts for the job</value>
        [DataMember(Name="FeatureGroups", EmitDefaultValue=false)]
        public List<FeatureGroup> FeatureGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DoorJob {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DoorData: ").Append(DoorData).Append("\n");
            sb.Append("  FeatureGroups: ").Append(FeatureGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DoorJob);
        }

        /// <summary>
        /// Returns true if DoorJob instances are equal
        /// </summary>
        /// <param name="input">Instance of DoorJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DoorJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DoorData == input.DoorData ||
                    (this.DoorData != null &&
                    this.DoorData.Equals(input.DoorData))
                ) && 
                (
                    this.FeatureGroups == input.FeatureGroups ||
                    this.FeatureGroups != null &&
                    this.FeatureGroups.SequenceEqual(input.FeatureGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DoorData != null)
                    hashCode = hashCode * 59 + this.DoorData.GetHashCode();
                if (this.FeatureGroups != null)
                    hashCode = hashCode * 59 + this.FeatureGroups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
