/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The rectangle feature type, produces a rectangle cut on the door with four corner radii
    /// </summary>
    [DataContract]
    public partial class Rectangle : AbstractFeature,  IEquatable<Rectangle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rectangle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Rectangle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rectangle" /> class.
        /// </summary>
        /// <param name="Bevel">Bevel value in degrees for the rectangle.</param>
        /// <param name="Length">Length of the rectangle (along L-axis if on the hinge or lock door side, W-axis if on the top or bottom door side).</param>
        /// <param name="Width">Width of the rectangle (along T-axis).</param>
        /// <param name="Depth">Depth of the rectangle.</param>
        /// <param name="Radius1">Corner radius closest to lengthwise dimension reference (L-axis or W-axis) and closest to widthwise dimension reference (T-axis).</param>
        /// <param name="Radius2">Corner radius furthest from lengthwise dimension reference (L-axis or W-axis) and closest to widthwise dimension reference (T-axis).</param>
        /// <param name="Radius3">Corner radius closest to lengthwise dimension reference (L-axis or W-axis) and furthest from widthwise dimension reference (T-axis).</param>
        /// <param name="Radius4">Corner radius furthest from lengthwise dimension reference (L-axis or W-axis) and furthest from widthwise dimension reference (T-axis).</param>
        public Rectangle(string Bevel = default(string), string Length = default(string), string Width = default(string), string Depth = default(string), string Radius1 = default(string), string Radius2 = default(string), string Radius3 = default(string), string Radius4 = default(string), string Name = default(string), string Description = default(string), string TLocation = default(string), string WLocation = default(string), string LLocation = default(string), DoorSideEnum? DoorSide = default(DoorSideEnum?), List<AbstractFeature> Children = default(List<AbstractFeature>), string Type = "Circle") : base(Name, Description, TLocation, WLocation, LLocation, DoorSide, Children, Type)
        {
            this.Bevel = Bevel;
            this.Length = Length;
            this.Width = Width;
            this.Depth = Depth;
            this.Radius1 = Radius1;
            this.Radius2 = Radius2;
            this.Radius3 = Radius3;
            this.Radius4 = Radius4;
        }
        
        /// <summary>
        /// Bevel value in degrees for the rectangle
        /// </summary>
        /// <value>Bevel value in degrees for the rectangle</value>
        [DataMember(Name="Bevel", EmitDefaultValue=false)]
        public string Bevel { get; set; }

        /// <summary>
        /// Length of the rectangle (along L-axis if on the hinge or lock door side, W-axis if on the top or bottom door side)
        /// </summary>
        /// <value>Length of the rectangle (along L-axis if on the hinge or lock door side, W-axis if on the top or bottom door side)</value>
        [DataMember(Name="Length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Width of the rectangle (along T-axis)
        /// </summary>
        /// <value>Width of the rectangle (along T-axis)</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// Depth of the rectangle
        /// </summary>
        /// <value>Depth of the rectangle</value>
        [DataMember(Name="Depth", EmitDefaultValue=false)]
        public string Depth { get; set; }

        /// <summary>
        /// Corner radius closest to lengthwise dimension reference (L-axis or W-axis) and closest to widthwise dimension reference (T-axis)
        /// </summary>
        /// <value>Corner radius closest to lengthwise dimension reference (L-axis or W-axis) and closest to widthwise dimension reference (T-axis)</value>
        [DataMember(Name="Radius1", EmitDefaultValue=false)]
        public string Radius1 { get; set; }

        /// <summary>
        /// Corner radius furthest from lengthwise dimension reference (L-axis or W-axis) and closest to widthwise dimension reference (T-axis)
        /// </summary>
        /// <value>Corner radius furthest from lengthwise dimension reference (L-axis or W-axis) and closest to widthwise dimension reference (T-axis)</value>
        [DataMember(Name="Radius2", EmitDefaultValue=false)]
        public string Radius2 { get; set; }

        /// <summary>
        /// Corner radius closest to lengthwise dimension reference (L-axis or W-axis) and furthest from widthwise dimension reference (T-axis)
        /// </summary>
        /// <value>Corner radius closest to lengthwise dimension reference (L-axis or W-axis) and furthest from widthwise dimension reference (T-axis)</value>
        [DataMember(Name="Radius3", EmitDefaultValue=false)]
        public string Radius3 { get; set; }

        /// <summary>
        /// Corner radius furthest from lengthwise dimension reference (L-axis or W-axis) and furthest from widthwise dimension reference (T-axis)
        /// </summary>
        /// <value>Corner radius furthest from lengthwise dimension reference (L-axis or W-axis) and furthest from widthwise dimension reference (T-axis)</value>
        [DataMember(Name="Radius4", EmitDefaultValue=false)]
        public string Radius4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rectangle {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Bevel: ").Append(Bevel).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Radius1: ").Append(Radius1).Append("\n");
            sb.Append("  Radius2: ").Append(Radius2).Append("\n");
            sb.Append("  Radius3: ").Append(Radius3).Append("\n");
            sb.Append("  Radius4: ").Append(Radius4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rectangle);
        }

        /// <summary>
        /// Returns true if Rectangle instances are equal
        /// </summary>
        /// <param name="input">Instance of Rectangle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rectangle input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Bevel == input.Bevel ||
                    (this.Bevel != null &&
                    this.Bevel.Equals(input.Bevel))
                ) && base.Equals(input) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && base.Equals(input) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && base.Equals(input) && 
                (
                    this.Depth == input.Depth ||
                    (this.Depth != null &&
                    this.Depth.Equals(input.Depth))
                ) && base.Equals(input) && 
                (
                    this.Radius1 == input.Radius1 ||
                    (this.Radius1 != null &&
                    this.Radius1.Equals(input.Radius1))
                ) && base.Equals(input) && 
                (
                    this.Radius2 == input.Radius2 ||
                    (this.Radius2 != null &&
                    this.Radius2.Equals(input.Radius2))
                ) && base.Equals(input) && 
                (
                    this.Radius3 == input.Radius3 ||
                    (this.Radius3 != null &&
                    this.Radius3.Equals(input.Radius3))
                ) && base.Equals(input) && 
                (
                    this.Radius4 == input.Radius4 ||
                    (this.Radius4 != null &&
                    this.Radius4.Equals(input.Radius4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Bevel != null)
                    hashCode = hashCode * 59 + this.Bevel.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Depth != null)
                    hashCode = hashCode * 59 + this.Depth.GetHashCode();
                if (this.Radius1 != null)
                    hashCode = hashCode * 59 + this.Radius1.GetHashCode();
                if (this.Radius2 != null)
                    hashCode = hashCode * 59 + this.Radius2.GetHashCode();
                if (this.Radius3 != null)
                    hashCode = hashCode * 59 + this.Radius3.GetHashCode();
                if (this.Radius4 != null)
                    hashCode = hashCode * 59 + this.Radius4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
