/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ClipPockets
    /// </summary>
    [DataContract]
    public partial class ClipPockets :  IEquatable<ClipPockets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClipPockets" /> class.
        /// </summary>
        /// <param name="MaxDistanceApart">Max distance apart between clips (measured center to center)..</param>
        /// <param name="MaxDistanceFromCorners">Max distance from shape corner to first clip (center to corner)..</param>
        /// <param name="Enabled">Whether the augmentation is skipped or not for the door job (skips validation and application of the augmentation).</param>
        public ClipPockets(string MaxDistanceApart = default(string), string MaxDistanceFromCorners = default(string), bool? Enabled = default(bool?))
        {
            this.MaxDistanceApart = MaxDistanceApart;
            this.MaxDistanceFromCorners = MaxDistanceFromCorners;
            this.Enabled = Enabled;
        }
        
        /// <summary>
        /// Max distance apart between clips (measured center to center).
        /// </summary>
        /// <value>Max distance apart between clips (measured center to center).</value>
        [DataMember(Name="MaxDistanceApart", EmitDefaultValue=false)]
        public string MaxDistanceApart { get; set; }

        /// <summary>
        /// Max distance from shape corner to first clip (center to corner).
        /// </summary>
        /// <value>Max distance from shape corner to first clip (center to corner).</value>
        [DataMember(Name="MaxDistanceFromCorners", EmitDefaultValue=false)]
        public string MaxDistanceFromCorners { get; set; }

        /// <summary>
        /// Whether the augmentation is skipped or not for the door job (skips validation and application of the augmentation)
        /// </summary>
        /// <value>Whether the augmentation is skipped or not for the door job (skips validation and application of the augmentation)</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClipPockets {\n");
            sb.Append("  MaxDistanceApart: ").Append(MaxDistanceApart).Append("\n");
            sb.Append("  MaxDistanceFromCorners: ").Append(MaxDistanceFromCorners).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClipPockets);
        }

        /// <summary>
        /// Returns true if ClipPockets instances are equal
        /// </summary>
        /// <param name="input">Instance of ClipPockets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClipPockets input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxDistanceApart == input.MaxDistanceApart ||
                    (this.MaxDistanceApart != null &&
                    this.MaxDistanceApart.Equals(input.MaxDistanceApart))
                ) && 
                (
                    this.MaxDistanceFromCorners == input.MaxDistanceFromCorners ||
                    (this.MaxDistanceFromCorners != null &&
                    this.MaxDistanceFromCorners.Equals(input.MaxDistanceFromCorners))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxDistanceApart != null)
                    hashCode = hashCode * 59 + this.MaxDistanceApart.GetHashCode();
                if (this.MaxDistanceFromCorners != null)
                    hashCode = hashCode * 59 + this.MaxDistanceFromCorners.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
