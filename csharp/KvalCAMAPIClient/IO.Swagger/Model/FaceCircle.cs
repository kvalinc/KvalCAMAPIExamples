/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The face circle feature type, produces a circular cut on the face of the door with a diameter and two depths given (one for each side of the face)
    /// </summary>
    [DataContract]
    public partial class FaceCircle : AbstractFeature,  IEquatable<FaceCircle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceCircle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaceCircle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceCircle" /> class.
        /// </summary>
        /// <param name="Diameter">Target nominal diameter of the face circle, this diameter is cut if the machine/tools can produce it.</param>
        /// <param name="DiameterMinimum">Minimum allowed diameter for the face circle, if machine/tools unable to produce target diameter then this is the minimum acceptable diameter.</param>
        /// <param name="DiameterMaximum">Maximum allowed diameter for the face circle, if machine/tools unable to produce target diameter then this is the maximum acceptable diameter.</param>
        /// <param name="DepthClosestToRef">Depth closest to the T-axis reference.</param>
        /// <param name="DepthFurthestFromRef">Depth furthest from the T-axis reference.</param>
        public FaceCircle(string Diameter = default(string), string DiameterMinimum = default(string), string DiameterMaximum = default(string), string DepthClosestToRef = default(string), string DepthFurthestFromRef = default(string), string Name = default(string), string Description = default(string), string TLocation = default(string), string WLocation = default(string), string LLocation = default(string), DoorSideEnum? DoorSide = default(DoorSideEnum?), List<AbstractFeature> Children = default(List<AbstractFeature>), string Type = "Circle") : base(Name, Description, TLocation, WLocation, LLocation, DoorSide, Children, Type)
        {
            this.Diameter = Diameter;
            this.DiameterMinimum = DiameterMinimum;
            this.DiameterMaximum = DiameterMaximum;
            this.DepthClosestToRef = DepthClosestToRef;
            this.DepthFurthestFromRef = DepthFurthestFromRef;
        }
        
        /// <summary>
        /// Target nominal diameter of the face circle, this diameter is cut if the machine/tools can produce it
        /// </summary>
        /// <value>Target nominal diameter of the face circle, this diameter is cut if the machine/tools can produce it</value>
        [DataMember(Name="Diameter", EmitDefaultValue=false)]
        public string Diameter { get; set; }

        /// <summary>
        /// Minimum allowed diameter for the face circle, if machine/tools unable to produce target diameter then this is the minimum acceptable diameter
        /// </summary>
        /// <value>Minimum allowed diameter for the face circle, if machine/tools unable to produce target diameter then this is the minimum acceptable diameter</value>
        [DataMember(Name="DiameterMinimum", EmitDefaultValue=false)]
        public string DiameterMinimum { get; set; }

        /// <summary>
        /// Maximum allowed diameter for the face circle, if machine/tools unable to produce target diameter then this is the maximum acceptable diameter
        /// </summary>
        /// <value>Maximum allowed diameter for the face circle, if machine/tools unable to produce target diameter then this is the maximum acceptable diameter</value>
        [DataMember(Name="DiameterMaximum", EmitDefaultValue=false)]
        public string DiameterMaximum { get; set; }

        /// <summary>
        /// Depth closest to the T-axis reference
        /// </summary>
        /// <value>Depth closest to the T-axis reference</value>
        [DataMember(Name="DepthClosestToRef", EmitDefaultValue=false)]
        public string DepthClosestToRef { get; set; }

        /// <summary>
        /// Depth furthest from the T-axis reference
        /// </summary>
        /// <value>Depth furthest from the T-axis reference</value>
        [DataMember(Name="DepthFurthestFromRef", EmitDefaultValue=false)]
        public string DepthFurthestFromRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaceCircle {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  DiameterMinimum: ").Append(DiameterMinimum).Append("\n");
            sb.Append("  DiameterMaximum: ").Append(DiameterMaximum).Append("\n");
            sb.Append("  DepthClosestToRef: ").Append(DepthClosestToRef).Append("\n");
            sb.Append("  DepthFurthestFromRef: ").Append(DepthFurthestFromRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaceCircle);
        }

        /// <summary>
        /// Returns true if FaceCircle instances are equal
        /// </summary>
        /// <param name="input">Instance of FaceCircle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaceCircle input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Diameter == input.Diameter ||
                    (this.Diameter != null &&
                    this.Diameter.Equals(input.Diameter))
                ) && base.Equals(input) && 
                (
                    this.DiameterMinimum == input.DiameterMinimum ||
                    (this.DiameterMinimum != null &&
                    this.DiameterMinimum.Equals(input.DiameterMinimum))
                ) && base.Equals(input) && 
                (
                    this.DiameterMaximum == input.DiameterMaximum ||
                    (this.DiameterMaximum != null &&
                    this.DiameterMaximum.Equals(input.DiameterMaximum))
                ) && base.Equals(input) && 
                (
                    this.DepthClosestToRef == input.DepthClosestToRef ||
                    (this.DepthClosestToRef != null &&
                    this.DepthClosestToRef.Equals(input.DepthClosestToRef))
                ) && base.Equals(input) && 
                (
                    this.DepthFurthestFromRef == input.DepthFurthestFromRef ||
                    (this.DepthFurthestFromRef != null &&
                    this.DepthFurthestFromRef.Equals(input.DepthFurthestFromRef))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Diameter != null)
                    hashCode = hashCode * 59 + this.Diameter.GetHashCode();
                if (this.DiameterMinimum != null)
                    hashCode = hashCode * 59 + this.DiameterMinimum.GetHashCode();
                if (this.DiameterMaximum != null)
                    hashCode = hashCode * 59 + this.DiameterMaximum.GetHashCode();
                if (this.DepthClosestToRef != null)
                    hashCode = hashCode * 59 + this.DepthClosestToRef.GetHashCode();
                if (this.DepthFurthestFromRef != null)
                    hashCode = hashCode * 59 + this.DepthFurthestFromRef.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
