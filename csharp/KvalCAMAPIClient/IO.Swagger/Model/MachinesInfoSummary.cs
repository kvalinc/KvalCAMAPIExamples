/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Holds all the summary information for machines in the machine line
    /// </summary>
    [DataContract]
    public partial class MachinesInfoSummary :  IEquatable<MachinesInfoSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MachinesInfoSummary" /> class.
        /// </summary>
        /// <param name="MachineSummaries">List of summary information for each machine.</param>
        public MachinesInfoSummary(List<MachineSummary> MachineSummaries = default(List<MachineSummary>))
        {
            this.MachineSummaries = MachineSummaries;
        }
        
        /// <summary>
        /// List of summary information for each machine
        /// </summary>
        /// <value>List of summary information for each machine</value>
        [DataMember(Name="MachineSummaries", EmitDefaultValue=false)]
        public List<MachineSummary> MachineSummaries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachinesInfoSummary {\n");
            sb.Append("  MachineSummaries: ").Append(MachineSummaries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachinesInfoSummary);
        }

        /// <summary>
        /// Returns true if MachinesInfoSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of MachinesInfoSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachinesInfoSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MachineSummaries == input.MachineSummaries ||
                    this.MachineSummaries != null &&
                    this.MachineSummaries.SequenceEqual(input.MachineSummaries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MachineSummaries != null)
                    hashCode = hashCode * 59 + this.MachineSummaries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
