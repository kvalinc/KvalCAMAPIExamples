/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Door data data representing all the parameters of a door
    /// </summary>
    [DataContract]
    public partial class DoorData :  IEquatable<DoorData>, IValidatableObject
    {
        /// <summary>
        /// Handedness of the door
        /// </summary>
        /// <value>Handedness of the door</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HandEnum
        {
            
            /// <summary>
            /// Enum LeftHand for value: LeftHand
            /// </summary>
            [EnumMember(Value = "LeftHand")]
            LeftHand = 1,
            
            /// <summary>
            /// Enum RightHand for value: RightHand
            /// </summary>
            [EnumMember(Value = "RightHand")]
            RightHand = 2,
            
            /// <summary>
            /// Enum LeftHandReverse for value: LeftHandReverse
            /// </summary>
            [EnumMember(Value = "LeftHandReverse")]
            LeftHandReverse = 3,
            
            /// <summary>
            /// Enum RightHandReverse for value: RightHandReverse
            /// </summary>
            [EnumMember(Value = "RightHandReverse")]
            RightHandReverse = 4
        }

        /// <summary>
        /// Handedness of the door
        /// </summary>
        /// <value>Handedness of the door</value>
        [DataMember(Name="Hand", EmitDefaultValue=false)]
        public HandEnum? Hand { get; set; }
        /// <summary>
        /// Defines DoorFaceMaterial
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DoorFaceMaterialEnum
        {
            
            /// <summary>
            /// Enum Wood for value: Wood
            /// </summary>
            [EnumMember(Value = "Wood")]
            Wood = 1,
            
            /// <summary>
            /// Enum Steel for value: Steel
            /// </summary>
            [EnumMember(Value = "Steel")]
            Steel = 2
        }

        /// <summary>
        /// Gets or Sets DoorFaceMaterial
        /// </summary>
        [DataMember(Name="DoorFaceMaterial", EmitDefaultValue=false)]
        public DoorFaceMaterialEnum? DoorFaceMaterial { get; set; }
        /// <summary>
        /// Defines DoorLockMaterial
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DoorLockMaterialEnum
        {
            
            /// <summary>
            /// Enum Wood for value: Wood
            /// </summary>
            [EnumMember(Value = "Wood")]
            Wood = 1,
            
            /// <summary>
            /// Enum Steel for value: Steel
            /// </summary>
            [EnumMember(Value = "Steel")]
            Steel = 2
        }

        /// <summary>
        /// Gets or Sets DoorLockMaterial
        /// </summary>
        [DataMember(Name="DoorLockMaterial", EmitDefaultValue=false)]
        public DoorLockMaterialEnum? DoorLockMaterial { get; set; }
        /// <summary>
        /// Defines DoorHingeMaterial
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DoorHingeMaterialEnum
        {
            
            /// <summary>
            /// Enum Wood for value: Wood
            /// </summary>
            [EnumMember(Value = "Wood")]
            Wood = 1,
            
            /// <summary>
            /// Enum Steel for value: Steel
            /// </summary>
            [EnumMember(Value = "Steel")]
            Steel = 2
        }

        /// <summary>
        /// Gets or Sets DoorHingeMaterial
        /// </summary>
        [DataMember(Name="DoorHingeMaterial", EmitDefaultValue=false)]
        public DoorHingeMaterialEnum? DoorHingeMaterial { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DoorData" /> class.
        /// </summary>
        /// <param name="Name">Name of the door.</param>
        /// <param name="Description">Description of the door.</param>
        /// <param name="Width">Width of the door (W-axis dimension), must be a real number.</param>
        /// <param name="Length">Length of the door (L-axis dimension), must be a real number.</param>
        /// <param name="Thickness">Thickness of the door (T-axis dimension), must be a real number.</param>
        /// <param name="Hand">Handedness of the door.</param>
        /// <param name="HingeSideBevel">Bevel in degrees on the hinge side, must be a real number.</param>
        /// <param name="LockSideBevel">Bevel in degrees on the lock side, must be a real number.</param>
        /// <param name="FeedRatePercentOverride">Global feed rate percent override to be applied to all cuts for this door, ppplies multiplicately with all other feed rate modifiers, must be a real number from 1 to 100.</param>
        /// <param name="DoorFaceMaterial">DoorFaceMaterial.</param>
        /// <param name="DoorLockMaterial">DoorLockMaterial.</param>
        /// <param name="DoorHingeMaterial">DoorHingeMaterial.</param>
        public DoorData(string Name = default(string), string Description = default(string), string Width = default(string), string Length = default(string), string Thickness = default(string), HandEnum? Hand = default(HandEnum?), string HingeSideBevel = default(string), string LockSideBevel = default(string), string FeedRatePercentOverride = default(string), DoorFaceMaterialEnum? DoorFaceMaterial = default(DoorFaceMaterialEnum?), DoorLockMaterialEnum? DoorLockMaterial = default(DoorLockMaterialEnum?), DoorHingeMaterialEnum? DoorHingeMaterial = default(DoorHingeMaterialEnum?))
        {
            this.Name = Name;
            this.Description = Description;
            this.Width = Width;
            this.Length = Length;
            this.Thickness = Thickness;
            this.Hand = Hand;
            this.HingeSideBevel = HingeSideBevel;
            this.LockSideBevel = LockSideBevel;
            this.FeedRatePercentOverride = FeedRatePercentOverride;
            this.DoorFaceMaterial = DoorFaceMaterial;
            this.DoorLockMaterial = DoorLockMaterial;
            this.DoorHingeMaterial = DoorHingeMaterial;
        }
        
        /// <summary>
        /// Name of the door
        /// </summary>
        /// <value>Name of the door</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the door
        /// </summary>
        /// <value>Description of the door</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Width of the door (W-axis dimension), must be a real number
        /// </summary>
        /// <value>Width of the door (W-axis dimension), must be a real number</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// Length of the door (L-axis dimension), must be a real number
        /// </summary>
        /// <value>Length of the door (L-axis dimension), must be a real number</value>
        [DataMember(Name="Length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Thickness of the door (T-axis dimension), must be a real number
        /// </summary>
        /// <value>Thickness of the door (T-axis dimension), must be a real number</value>
        [DataMember(Name="Thickness", EmitDefaultValue=false)]
        public string Thickness { get; set; }


        /// <summary>
        /// Bevel in degrees on the hinge side, must be a real number
        /// </summary>
        /// <value>Bevel in degrees on the hinge side, must be a real number</value>
        [DataMember(Name="HingeSideBevel", EmitDefaultValue=false)]
        public string HingeSideBevel { get; set; }

        /// <summary>
        /// Bevel in degrees on the lock side, must be a real number
        /// </summary>
        /// <value>Bevel in degrees on the lock side, must be a real number</value>
        [DataMember(Name="LockSideBevel", EmitDefaultValue=false)]
        public string LockSideBevel { get; set; }

        /// <summary>
        /// Global feed rate percent override to be applied to all cuts for this door, ppplies multiplicately with all other feed rate modifiers, must be a real number from 1 to 100
        /// </summary>
        /// <value>Global feed rate percent override to be applied to all cuts for this door, ppplies multiplicately with all other feed rate modifiers, must be a real number from 1 to 100</value>
        [DataMember(Name="FeedRatePercentOverride", EmitDefaultValue=false)]
        public string FeedRatePercentOverride { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DoorData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Thickness: ").Append(Thickness).Append("\n");
            sb.Append("  Hand: ").Append(Hand).Append("\n");
            sb.Append("  HingeSideBevel: ").Append(HingeSideBevel).Append("\n");
            sb.Append("  LockSideBevel: ").Append(LockSideBevel).Append("\n");
            sb.Append("  FeedRatePercentOverride: ").Append(FeedRatePercentOverride).Append("\n");
            sb.Append("  DoorFaceMaterial: ").Append(DoorFaceMaterial).Append("\n");
            sb.Append("  DoorLockMaterial: ").Append(DoorLockMaterial).Append("\n");
            sb.Append("  DoorHingeMaterial: ").Append(DoorHingeMaterial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DoorData);
        }

        /// <summary>
        /// Returns true if DoorData instances are equal
        /// </summary>
        /// <param name="input">Instance of DoorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DoorData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Thickness == input.Thickness ||
                    (this.Thickness != null &&
                    this.Thickness.Equals(input.Thickness))
                ) && 
                (
                    this.Hand == input.Hand ||
                    (this.Hand != null &&
                    this.Hand.Equals(input.Hand))
                ) && 
                (
                    this.HingeSideBevel == input.HingeSideBevel ||
                    (this.HingeSideBevel != null &&
                    this.HingeSideBevel.Equals(input.HingeSideBevel))
                ) && 
                (
                    this.LockSideBevel == input.LockSideBevel ||
                    (this.LockSideBevel != null &&
                    this.LockSideBevel.Equals(input.LockSideBevel))
                ) && 
                (
                    this.FeedRatePercentOverride == input.FeedRatePercentOverride ||
                    (this.FeedRatePercentOverride != null &&
                    this.FeedRatePercentOverride.Equals(input.FeedRatePercentOverride))
                ) && 
                (
                    this.DoorFaceMaterial == input.DoorFaceMaterial ||
                    (this.DoorFaceMaterial != null &&
                    this.DoorFaceMaterial.Equals(input.DoorFaceMaterial))
                ) && 
                (
                    this.DoorLockMaterial == input.DoorLockMaterial ||
                    (this.DoorLockMaterial != null &&
                    this.DoorLockMaterial.Equals(input.DoorLockMaterial))
                ) && 
                (
                    this.DoorHingeMaterial == input.DoorHingeMaterial ||
                    (this.DoorHingeMaterial != null &&
                    this.DoorHingeMaterial.Equals(input.DoorHingeMaterial))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Thickness != null)
                    hashCode = hashCode * 59 + this.Thickness.GetHashCode();
                if (this.Hand != null)
                    hashCode = hashCode * 59 + this.Hand.GetHashCode();
                if (this.HingeSideBevel != null)
                    hashCode = hashCode * 59 + this.HingeSideBevel.GetHashCode();
                if (this.LockSideBevel != null)
                    hashCode = hashCode * 59 + this.LockSideBevel.GetHashCode();
                if (this.FeedRatePercentOverride != null)
                    hashCode = hashCode * 59 + this.FeedRatePercentOverride.GetHashCode();
                if (this.DoorFaceMaterial != null)
                    hashCode = hashCode * 59 + this.DoorFaceMaterial.GetHashCode();
                if (this.DoorLockMaterial != null)
                    hashCode = hashCode * 59 + this.DoorLockMaterial.GetHashCode();
                if (this.DoorHingeMaterial != null)
                    hashCode = hashCode * 59 + this.DoorHingeMaterial.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
