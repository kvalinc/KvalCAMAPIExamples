/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class to represent an entry in the door job library that just includes some data about the job
    /// </summary>
    [DataContract]
    public partial class DoorJobHeader :  IEquatable<DoorJobHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DoorJobHeader" /> class.
        /// </summary>
        /// <param name="Id">Library id of the door job.</param>
        /// <param name="Name">Name of the door job.</param>
        /// <param name="Description">Description of the door job.</param>
        /// <param name="CreationStamp">Creation timestamp of the door job (when was the door job first created).</param>
        /// <param name="LastModifiedStamp">Last modified timestamp of the door job (when was the feature group last modified).</param>
        public DoorJobHeader(Guid? Id = default(Guid?), string Name = default(string), string Description = default(string), DateTime? CreationStamp = default(DateTime?), DateTime? LastModifiedStamp = default(DateTime?))
        {
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.CreationStamp = CreationStamp;
            this.LastModifiedStamp = LastModifiedStamp;
        }
        
        /// <summary>
        /// Library id of the door job
        /// </summary>
        /// <value>Library id of the door job</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Name of the door job
        /// </summary>
        /// <value>Name of the door job</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the door job
        /// </summary>
        /// <value>Description of the door job</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Creation timestamp of the door job (when was the door job first created)
        /// </summary>
        /// <value>Creation timestamp of the door job (when was the door job first created)</value>
        [DataMember(Name="CreationStamp", EmitDefaultValue=false)]
        public DateTime? CreationStamp { get; set; }

        /// <summary>
        /// Last modified timestamp of the door job (when was the feature group last modified)
        /// </summary>
        /// <value>Last modified timestamp of the door job (when was the feature group last modified)</value>
        [DataMember(Name="LastModifiedStamp", EmitDefaultValue=false)]
        public DateTime? LastModifiedStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DoorJobHeader {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreationStamp: ").Append(CreationStamp).Append("\n");
            sb.Append("  LastModifiedStamp: ").Append(LastModifiedStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DoorJobHeader);
        }

        /// <summary>
        /// Returns true if DoorJobHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of DoorJobHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DoorJobHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreationStamp == input.CreationStamp ||
                    (this.CreationStamp != null &&
                    this.CreationStamp.Equals(input.CreationStamp))
                ) && 
                (
                    this.LastModifiedStamp == input.LastModifiedStamp ||
                    (this.LastModifiedStamp != null &&
                    this.LastModifiedStamp.Equals(input.LastModifiedStamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreationStamp != null)
                    hashCode = hashCode * 59 + this.CreationStamp.GetHashCode();
                if (this.LastModifiedStamp != null)
                    hashCode = hashCode * 59 + this.LastModifiedStamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
