/* 
 * KvalCAM API
 *
 * KvalCAM interactive API documentation  Additional documentation is available here: https://docs.kvalinc.com/display/CAM/API  Examples are available on github here: https://github.com/kvalinc/KvalCAMAPIExamples
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Error returned when an add to queue request fails
    /// </summary>
    [DataContract]
    public partial class AddJobToQueueFailedError :  IEquatable<AddJobToQueueFailedError>, IValidatableObject
    {
        /// <summary>
        /// The error that occured in attempting to add the job to the queue
        /// </summary>
        /// <value>The error that occured in attempting to add the job to the queue</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorEnum
        {
            
            /// <summary>
            /// Enum JobNotFound for value: JobNotFound
            /// </summary>
            [EnumMember(Value = "JobNotFound")]
            JobNotFound = 1,
            
            /// <summary>
            /// Enum ParseAndEvaluateFailed for value: ParseAndEvaluateFailed
            /// </summary>
            [EnumMember(Value = "ParseAndEvaluateFailed")]
            ParseAndEvaluateFailed = 2,
            
            /// <summary>
            /// Enum ValidationFailed for value: ValidationFailed
            /// </summary>
            [EnumMember(Value = "ValidationFailed")]
            ValidationFailed = 3
        }

        /// <summary>
        /// The error that occured in attempting to add the job to the queue
        /// </summary>
        /// <value>The error that occured in attempting to add the job to the queue</value>
        [DataMember(Name="Error", EmitDefaultValue=false)]
        public ErrorEnum? Error { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddJobToQueueFailedError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddJobToQueueFailedError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddJobToQueueFailedError" /> class.
        /// </summary>
        /// <param name="Error">The error that occured in attempting to add the job to the queue.</param>
        /// <param name="PropertyPath">If the error that occured is ParseAndEvaluateFailed then this field will be populated with a path to the first property that failed.</param>
        /// <param name="Message">Message describing the error, this field is always present (required).</param>
        /// <param name="GenericSchemaError">Generic schema error that holds all common/generic errors that occured due to schema provided, e.g. expected a string rather than a number,   this field may be missing if no generic schema errors occured.</param>
        public AddJobToQueueFailedError(ErrorEnum? Error = default(ErrorEnum?), string PropertyPath = default(string), string Message = default(string), GenericSchemaError GenericSchemaError = default(GenericSchemaError))
        {
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for AddJobToQueueFailedError and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            this.Error = Error;
            this.PropertyPath = PropertyPath;
            this.GenericSchemaError = GenericSchemaError;
        }
        

        /// <summary>
        /// If the error that occured is ParseAndEvaluateFailed then this field will be populated with a path to the first property that failed
        /// </summary>
        /// <value>If the error that occured is ParseAndEvaluateFailed then this field will be populated with a path to the first property that failed</value>
        [DataMember(Name="PropertyPath", EmitDefaultValue=false)]
        public string PropertyPath { get; set; }

        /// <summary>
        /// Message describing the error, this field is always present
        /// </summary>
        /// <value>Message describing the error, this field is always present</value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Generic schema error that holds all common/generic errors that occured due to schema provided, e.g. expected a string rather than a number,   this field may be missing if no generic schema errors occured
        /// </summary>
        /// <value>Generic schema error that holds all common/generic errors that occured due to schema provided, e.g. expected a string rather than a number,   this field may be missing if no generic schema errors occured</value>
        [DataMember(Name="GenericSchemaError", EmitDefaultValue=false)]
        public GenericSchemaError GenericSchemaError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddJobToQueueFailedError {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  PropertyPath: ").Append(PropertyPath).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  GenericSchemaError: ").Append(GenericSchemaError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddJobToQueueFailedError);
        }

        /// <summary>
        /// Returns true if AddJobToQueueFailedError instances are equal
        /// </summary>
        /// <param name="input">Instance of AddJobToQueueFailedError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddJobToQueueFailedError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.PropertyPath == input.PropertyPath ||
                    (this.PropertyPath != null &&
                    this.PropertyPath.Equals(input.PropertyPath))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.GenericSchemaError == input.GenericSchemaError ||
                    (this.GenericSchemaError != null &&
                    this.GenericSchemaError.Equals(input.GenericSchemaError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.PropertyPath != null)
                    hashCode = hashCode * 59 + this.PropertyPath.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.GenericSchemaError != null)
                    hashCode = hashCode * 59 + this.GenericSchemaError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
